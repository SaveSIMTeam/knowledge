fn-bea:inlinedXML(fn:replace(fn:replace($strXML,'<element >',''),'</element>','')) 

{
 for $name in distinct-values($findEquipmentsOut1/device/ns2:name/text())
	return
	 <device>
		  <ns2:manufacturer>{ distinct-values(data($findEquipmentsOut1/device[./ns2:name=$name]/ns2:manufacturer)) }</ns2:manufacturer>
		  <ns2:model>{ distinct-values(data($findEquipmentsOut1/device[./ns2:name=$name]/ns2:model)) }</ns2:model>
		  <ns2:amountPoints>{ count($findEquipmentsOut1/device[./ns2:name=$name]) }</ns2:amountPoints>
		  <ns2:equipamentType>{ data($name) }</ns2:equipamentType>
	 </device> 
}


{ let $acessPoint := count($createSimplifiedAppointmentETAIn1/workOrder/ns0:WorkOrderComprisedOf/ns0:BusinessInteractionItemInvolvesProduct[(./ns0:provisioningCode eq '16158' or ./ns0:provisioningCode eq '16535') and (./ns0:productAction eq 'Adicionar' or ./ns0:productAction eq 'Desconectar')]) return
                                        <property>
                                            <label>XA_ACCESS_POINT_TV</label>
                                            <value>{data($acessPoint)}</value>   
                                         </property>
                                  }


exists($getActiveAccountServicesOut/customerFacingServices[./can:serviceId = $physicalResourceAvailability/can:telephoneNumber/can:number]) 

=============================================================================================================
http://jaredsoablogaz.blogspot.com.br/2013/01/choosing-between-route-service-callout.html


  <con2:xqueryText>data($body//cus:ErrorCode) != "0" and not(empty($body//cus:ErrorCode/node()))</con2:xqueryText>

<can:WorkOrderComprisedOf>
	{
		$workOrderComprisedOf/node()[./can:BusinessInteractionItemInvolvesProduct[./can:serviceId ne $serviceId]]
	}
	<can:BusinessInteractionItemInvolvesProduct>
	{
		( 
		$workOrderComprisedOf/can:BusinessInteractionItemInvolvesProduct[./can:serviceId eq $serviceId]/node()[local-name(.) ne 'LogicalResourcesAssociated'],
		<can:LogicalResourcesAssociated>
			<can:telephoneNumber>
				<can:associatedNumericPortability>
					<can:numericPortabilityWindow>
						<can:startDateTime>{data($scheduleDate)}</can:startDateTime>
					    <can:endDateTime>{data($scheduleDate)+ xdt:dayTimeDuration("PT2H")}</can:endDateTime>
					</can:numericPortabilityWindow>
				</can:associatedNumericPortability>
				{
				$workOrderComprisedOf/can:BusinessInteractionItemInvolvesProduct[./can:serviceId eq $serviceId]/node()[local-name(.) eq 'LogicalResourcesAssociated']/can:telephoneNumber/node()[local-name(.) ne 'associatedNumericPortability'] 
				}
			</can:telephoneNumber>
		</can:LogicalResourcesAssociated>
		)
	}
	</can:BusinessInteractionItemInvolvesProduct>
)
</can:WorkOrderComprisedOf>


{ for $id in $customerServiceRequest/ns1:id return
	<ns2:ID>{ data($id) }</ns2:ID>
}


<ns0:findServiceInventoryByCorrelationIn>
        {
        let $serviceId := $updateServiceInventoryIn1/service/ns2:serviceId
        return 
            if (exists($serviceId) and $serviceId ne "") 
            then
                <service>
                    <ns2:serviceId> { $serviceId }  </ns2:serviceId >
                </service>
                
            else 
            let $serviceId := $updateServiceInventoryIn1/customerServiceRequest/ns2:involvesProduct/ns2:serviceId
            where (exists($serviceId) and $serviceId ne "") 
            return
                <service>
                    <ns2:serviceId> { $serviceId }  </ns2:serviceId >
                </service>
            }
        
   </ns0:findServiceInventoryByCorrelationIn>